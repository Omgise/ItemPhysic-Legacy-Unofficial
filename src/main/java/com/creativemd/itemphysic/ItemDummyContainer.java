package com.creativemd.itemphysic;

import com.creativemd.creativecore.common.packet.CreativeCorePacket;
import com.creativemd.itemphysic.config.ItemConfigSystem;
import com.creativemd.itemphysic.list.ItemsWithMetaRegistryBurn;
import com.creativemd.itemphysic.list.ItemsWithMetaRegistryFloat;
import com.creativemd.itemphysic.packet.DropPacket;
import com.creativemd.itemphysic.packet.PickupPacket;
import com.creativemd.itemphysic.physics.ClientPhysic;
import com.google.common.eventbus.EventBus;
import com.google.common.eventbus.Subscribe;
import cpw.mods.fml.common.DummyModContainer;
import cpw.mods.fml.common.FMLCommonHandler;
import cpw.mods.fml.common.LoadController;
import cpw.mods.fml.common.Loader;
import cpw.mods.fml.common.ModMetadata;
import cpw.mods.fml.common.Optional.Method;
import cpw.mods.fml.common.event.FMLConstructionEvent;
import cpw.mods.fml.common.event.FMLInitializationEvent;
import cpw.mods.fml.common.event.FMLPostInitializationEvent;
import cpw.mods.fml.common.event.FMLPreInitializationEvent;
import cpw.mods.fml.common.gameevent.TickEvent.RenderTickEvent;
import cpw.mods.fml.common.registry.GameRegistry;
import cpw.mods.fml.relauncher.Side;
import cpw.mods.fml.relauncher.SideOnly;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.util.EnumChatFormatting;
import net.minecraftforge.common.MinecraftForge;
import net.minecraftforge.common.config.Configuration;
import net.minecraftforge.oredict.OreDictionary;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;

public class ItemDummyContainer extends DummyModContainer {

	// We define the mod properties
	public static final String MODID = "itemphysic";
	public static final String NAME = "ItemPhysic";
	public static final String VERSION = "1.2.1" + " kotmatross edition";
	public static final String DESCRIPTION = "A minecraft mod that adds physics to thrown items.";
	public static final String CREDITS = "CreativeMD";
	public static final String URL = "";
	public static final boolean LOGO = false;

	public ItemDummyContainer() {

		super(new ModMetadata());
		ModMetadata meta = getMetadata();
		meta.modId = MODID;
		meta.name = NAME;
		meta.version = VERSION; //String.format("%d.%d.%d.%d", majorVersion, minorVersion, revisionVersion, buildVersion);
		meta.credits = CREDITS;
		meta.authorList = Arrays.asList(EnumChatFormatting.GOLD + "" + EnumChatFormatting.BOLD + "CreativeMD",
                                         EnumChatFormatting.RED + "" + EnumChatFormatting.BOLD + "HRudyPlayZ",
                                         EnumChatFormatting.AQUA + "" + EnumChatFormatting.BOLD + "Kotmatross");
		meta.description = DESCRIPTION;
		meta.url = URL;
		meta.updateUrl = "";
		meta.screenshots = new String[0];
		meta.logoFile = "";
	}

	@Override
	public boolean registerBus(EventBus bus, LoadController controller) {
		bus.register(this);
		return true;
	}

    @Subscribe
	public void modConstruction(FMLConstructionEvent evt){}

    @Subscribe
	public void init(FMLInitializationEvent evt) {

		if (!ItemTransformer.isLite) {
			MinecraftForge.EVENT_BUS.register(new EventHandler());
			FMLCommonHandler.instance().bus().register(new EventHandler());
			initFull();
		} else {
			MinecraftForge.EVENT_BUS.register(new EventHandlerLite());
			FMLCommonHandler.instance().bus().register(new EventHandlerLite());
		}
	}

	@Method(modid = "creativecore")
	public static void initFull() {
		CreativeCorePacket.registerPacket(DropPacket.class, "IPDrop");
		CreativeCorePacket.registerPacket(PickupPacket.class, "IPPick");

		try {
			if (!ItemTransformer.isLite && Loader.isModLoaded("ingameconfigmanager")) ItemConfigSystem.loadConfig();
		} catch(Exception e) {}
	}

	public static Configuration config;
	public static float rotateSpeed = 1.0F;

    @Subscribe
	public void preInit(FMLPreInitializationEvent evt) {
		// The following overrides the mcmod.info file!
		// Adapted from Jabelar's Magic Beans:
		// https://github.com/jabelar/MagicBeans-1.7.10/blob/e48456397f9c6c27efce18e6b9ad34407e6bc7c7/src/main/java/com/blogspot/jabelarminecraft/magicbeans/MagicBeans.java

		// stops Forge from complaining about missing mcmod.info (in case i forget it).
		evt.getModMetadata().autogenerated = false;

		// Mod name
		evt.getModMetadata().name = EnumChatFormatting.RED + NAME;

		// Mod version
		evt.getModMetadata().version = EnumChatFormatting.GRAY + "" + EnumChatFormatting.BOLD + VERSION;

		// Mod credits
		evt.getModMetadata().credits = EnumChatFormatting.BOLD + CREDITS;

		// Mod URL
		evt.getModMetadata().url = EnumChatFormatting.GRAY + URL;

		// Mod description
		evt.getModMetadata().description = EnumChatFormatting.GRAY + DESCRIPTION;

		// Mod logo
		if (LOGO) evt.getModMetadata().logoFile = "title.png";


		config = new Configuration(evt.getSuggestedConfigurationFile());
		config.load();

		if (!ItemTransformer.isLite) {
			enableItemDespawn = config.getBoolean("enableItemDespawn", "Item", true, "Whether to allow items to despawn after some times");
			despawnItem = config.getInt("despawn","Item",6000, 0, 2147483647, "Number of ticks an item takes to despawn (affected by enableItemDespawn).");
			customPickup = config.getBoolean("customPickup", "Item", false, "Whether to enable a custom pickup mechanic with right click or sneaking (disables auto pickup).");
			customThrow = config.getBoolean("customThrow", "Item", true, "Whether to enable a custom throwing mechanic when you hold the button.");

			invertBurnList = config.getBoolean("invertBurnList", "listBurn", false, "Whether to invert the burn list (so items in it will be the only ones to burn).");
			burnList = config.getStringList("burnList","listBurn", new String[]{
                    "minecraft:bedrock",                //IMMUNE
                    "minecraft:obsidian",               //EXPLOSION
                    "minecraft:netherrack",
                    "minecraft:soul_sand",
                    "minecraft:glowstone",
                    "minecraft:nether_brick",
                    "minecraft:nether_brick_fence",
                    "minecraft:nether_brick_stairs",
                    "minecraft:enchanting_table",
                    "minecraft:dragon_egg",             //IMMUNE
                    "minecraft:command_block",          //IMMUNE
                    "minecraft:golden_apple:1",
                    "minecraft:bucket",
                    "minecraft:water_bucket",
                    "minecraft:lava_bucket",
                    "minecraft:milk_bucket",
					"minecraft:blaze_rod",
                    "minecraft:ghast_tear",
                    "minecraft:nether_wart",
                    "minecraft:blaze_powder",
					"minecraft:magma_cream",
                    "minecraft:fire_charge",
                    "minecraft:netherbrick",
                "Thaumcraft:blockCustomOre:2",
                "Thaumcraft:blockCrystal:1",
                "Thaumcraft:ItemShard:1",
                "Thaumcraft:ItemShard:6",               //EXPLOSION
                "Thaumcraft:FocusFire",
                "etfuturum:netherite_scrap",            //EXPLOSION
                "etfuturum:netherite_ingot",            //EXPLOSION
                "etfuturum:netherite_helmet",           //EXPLOSION
                "etfuturum:netherite_chestplate",       //EXPLOSION
                "etfuturum:netherite_leggings",         //EXPLOSION
                "etfuturum:netherite_boots",            //EXPLOSION
                "etfuturum:netherite_pickaxe",          //EXPLOSION
                "etfuturum:netherite_spade",            //EXPLOSION
                "etfuturum:netherite_axe",              //EXPLOSION
                "etfuturum:netherite_hoe",              //EXPLOSION
                "etfuturum:netherite_sword",            //EXPLOSION
                "etfuturum:totem_of_undying",           //EXPLOSION
                "oreTungsten",
                "etfuturum:red_netherbrick",
                "etfuturum:red_netherbrick:1",
                "etfuturum:red_netherbrick:2",
                "etfuturum:ancient_debris",             //EXPLOSION
                "etfuturum:netherite_block",            //EXPLOSION
                "etfuturum:nether_gold_ore",
                "etfuturum:nether_brick_wall",
                "etfuturum:red_nether_brick_wall",
                "etfuturum:red_netherbrick_stairs",
                "etfuturum:red_netherbrick_slab",
                "etfuturum:soul_soil",
                "etfuturum:netherite_stairs",           //EXPLOSION
                "etfuturum:modded_raw_ore_block:9",
                "etfuturum:deepslate_thaumcraft_ore:2",
                "hbm:item.ingot_schrabidium",
                "hbm:item.ingot_schrabidate",
			}, "List of items that won't burn in lava or fire. See documentation on github");

			invertFloatList = config.getBoolean("invertFloatList", "listFloat", false, "Whether to invert the float list (so items in it won't be able to float).");
			floatList = config.getStringList("floatList","listFloat", new String[]{
                "minecraft:bedrock:fluid.tile.lava",
                "minecraft:netherrack:fluid.tile.lava",
                "minecraft:glowstone:fluid.tile.lava",
                "minecraft:nether_brick:fluid.tile.lava",
                "minecraft:nether_brick_fence:fluid.tile.lava",
                "minecraft:nether_brick_stairs:fluid.tile.lava",
                "minecraft:dragon_egg:fluid.tile.lava",
                "minecraft:golden_apple:1:fluid.tile.lava",
                "minecraft:blaze_rod:fluid.tile.lava",
                "minecraft:nether_wart:fluid.tile.lava",
                "minecraft:blaze_powder:fluid.tile.lava",
                "minecraft:magma_cream:fluid.tile.lava",
                "minecraft:fire_charge:fluid.tile.lava",
                "minecraft:netherbrick:fluid.tile.lava",
                "Thaumcraft:blockCustomOre:2:fluid.tile.lava",
                "Thaumcraft:blockCrystal:1:fluid.tile.lava",
                "Thaumcraft:ItemShard:1:fluid.tile.lava",
                "Thaumcraft:ItemShard:6:fluid.tile.lava",
                "Thaumcraft:FocusFire:fluid.tile.lava",
                "etfuturum:netherite_scrap:fluid.tile.lava",
                "etfuturum:netherite_ingot:fluid.tile.lava",
                "etfuturum:netherite_helmet:fluid.tile.lava",
                "etfuturum:netherite_chestplate:fluid.tile.lava",
                "etfuturum:netherite_leggings:fluid.tile.lava",
                "etfuturum:netherite_boots:fluid.tile.lava",
                "etfuturum:netherite_pickaxe:fluid.tile.lava",
                "etfuturum:netherite_spade:fluid.tile.lava",
                "etfuturum:netherite_axe:fluid.tile.lava",
                "etfuturum:netherite_hoe:fluid.tile.lava",
                "etfuturum:netherite_sword:fluid.tile.lava",
                "etfuturum:red_netherbrick:fluid.tile.lava",
                "etfuturum:red_netherbrick:1:fluid.tile.lava",
                "etfuturum:red_netherbrick:2:fluid.tile.lava",
                "etfuturum:ancient_debris:fluid.tile.lava",
                "etfuturum:nether_gold_ore:fluid.tile.lava",
                "etfuturum:nether_brick_wall:fluid.tile.lava",
                "etfuturum:red_nether_brick_wall:fluid.tile.lava",
                "etfuturum:red_netherbrick_stairs:fluid.tile.lava",
                "etfuturum:red_netherbrick_slab:fluid.tile.lava",
                "etfuturum:deepslate_thaumcraft_ore:2:fluid.tile.lava",
					"minecraft:stick",
					"plankWood",
					"logWood",
                    "blockCloth",
                    "stairWood",
					"minecraft:wooden_pickaxe:true",
					"minecraft:wooden_shovel:true",
					"minecraft:wooden_sword:true",
					"minecraft:wooden_axe:true",
					"minecraft:wooden_hoe:true",
                "minecraft:hay_block",
			}, "List of items that will float in fluids. See documentation on github");
		}

		rotateSpeed = config.getFloat("rotateSpeed", "Item", 1.0F, 0, 100, "Speed of the item rotation.");
		config.save();
		//ServerPhysic.loadItemList();
	}

    @Subscribe
	@SideOnly(Side.CLIENT)
	public void onRender(RenderTickEvent evt) {
		ClientPhysic.tick = System.nanoTime();
	}

    @Subscribe
	public void postInit(FMLPostInitializationEvent evt) {
        //This approach also acts like a hash function, initializing 2 lists at a late stage of loading so that the lists don't have to be checked constantly
        for (String itemName : burnList) {
            String modId;
            String itemNameOnly;
            int metadata = 0;
            boolean ignoremeta = false;

            String[] parts = itemName.split(":");
            if (parts.length >= 2) {
                modId = parts[0];
                itemNameOnly = parts[1];
                if (parts.length == 3) {
                    try {
                        metadata = Integer.parseInt(parts[2]);
                    } catch (NumberFormatException e) {
                        ignoremeta = Boolean.parseBoolean(parts[2]);
                    }
                }
                Item item = GameRegistry.findItem(modId, itemNameOnly);
                if (item != null) {
                    ItemsWithMetaRegistryBurn.ItemWithMetaBurn Item = new ItemsWithMetaRegistryBurn.ItemWithMetaBurn(item, metadata, ignoremeta);
                    ItemsWithMetaRegistryBurn.BurnItems.add(Item);
                }
            } else if(parts.length == 1) {
                List<String> oredictNames = Arrays.asList(OreDictionary.getOreNames());
                if (oredictNames.contains(itemName)) {
                    for (ItemStack oreStack : OreDictionary.getOres(itemName)) {
                        ItemsWithMetaRegistryBurn.ItemWithMetaBurn Item = new ItemsWithMetaRegistryBurn.ItemWithMetaBurn(oreStack.getItem(), oreStack.getItemDamage(), ignoremeta);
                        ItemsWithMetaRegistryBurn.BurnItems.add(Item);
                    }
                }
            }
        }
        for (String itemName : floatList) {
            String modId;
            String itemNameOnly;
            int metadata = 0;
            boolean ignoremeta = false;
            List<String> liquidsList = new ArrayList<>();
            liquidsList.add("fluid.tile.water"); // default

            String[] parts = itemName.split(":");
            if (parts.length >= 2) {
                modId = parts[0];
                itemNameOnly = parts[1];
                if (parts.length == 3) {
                    try {
                        metadata = Integer.parseInt(parts[2]);
                    } catch (NumberFormatException e) {
                        ignoremeta = Boolean.parseBoolean(parts[2]);
                    } if(!ignoremeta && metadata == 0) {
                        liquidsList.set(0, parts[2]); //assert that ignoremeta missing (I assure you, no one will write :false)
                    }
                } else if(parts.length > 3) {
                    try {
                        metadata = Integer.parseInt(parts[2]);
                    } catch (NumberFormatException e) {
                        ignoremeta = Boolean.parseBoolean(parts[2]);
                    }
//                    for(int i = 3; i < parts.length; i++) {
//                        liquidsList.add(parts[i]); // Add all liquids to the list
//                    }
                    liquidsList.addAll(Arrays.asList(parts).subList(3, parts.length));
                }
                Item item = GameRegistry.findItem(modId, itemNameOnly);
                if (item != null) {
                    //String[] liquidsArray = liquidsList.toArray(new String[liquidsList.size()]);
                    String[] liquidsArray = liquidsList.toArray(new String[0]);
                    ItemsWithMetaRegistryFloat.ItemWithMetaFloat Item = new ItemsWithMetaRegistryFloat.ItemWithMetaFloat(item, metadata, ignoremeta, liquidsArray);
                    ItemsWithMetaRegistryFloat.FloatItems.add(Item);
                    //LogManager.getLogger().fatal("ITEM : " + item.getUnlocalizedName() + " META : " + metadata + " IGNOREMETA : " + ignoremeta + " LIQUID : " + Arrays.asList(liquidsArray));
                }
            } else if(parts.length == 1) {
                List<String> oredictNames = Arrays.asList(OreDictionary.getOreNames());
                if (oredictNames.contains(itemName)) {
                    for (ItemStack oreStack : OreDictionary.getOres(itemName)) {
                         String[] liquidsArray = liquidsList.toArray(new String[0]);
                         //ItemsWithMetaRegistryFloat.ItemWithMetaFloat Item = new ItemsWithMetaRegistryFloat.ItemWithMetaFloat(oreStack.getItem(), oreStack.getItemDamage(), ignoremeta, liquidsList.toArray(new String[liquidsList.size()]));
                         if(oreStack.getItemDamage() == OreDictionary.WILDCARD_VALUE) {
                            ItemsWithMetaRegistryFloat.ItemWithMetaFloat Item = new ItemsWithMetaRegistryFloat.ItemWithMetaFloat(oreStack.getItem(), oreStack.getItemDamage(), true, liquidsArray);
                            ItemsWithMetaRegistryFloat.FloatItems.add(Item);
                            //LogManager.getLogger().fatal("ITEM : " + Objects.requireNonNull(oreStack.getItem()).getUnlocalizedName() + " META : " + oreStack.getItemDamage() + " IGNOREMETA : " + true + " LIQUID : " + Arrays.asList(liquidsArray));
                         } else {
                            ItemsWithMetaRegistryFloat.ItemWithMetaFloat Item = new ItemsWithMetaRegistryFloat.ItemWithMetaFloat(oreStack.getItem(), oreStack.getItemDamage(), ignoremeta, liquidsArray);
                            ItemsWithMetaRegistryFloat.FloatItems.add(Item);
                            //LogManager.getLogger().fatal("ITEM : " + Objects.requireNonNull(oreStack.getItem()).getUnlocalizedName() + " META : " + oreStack.getItemDamage() + " IGNOREMETA : " + ignoremeta + " LIQUID : " + Arrays.asList(liquidsArray));
                         }
                    }
                }
            }
        }
    }

	public static Logger log = LogManager.getLogger(ItemDummyContainer.MODID); // Creates the debug log function.

	public static boolean enableItemDespawn;
	public static int despawnItem;
	public static boolean customPickup;
	public static boolean customThrow;

	public static boolean invertBurnList;
	public static String[] burnList;

	public static boolean invertFloatList;
	public static String[] floatList;

}
